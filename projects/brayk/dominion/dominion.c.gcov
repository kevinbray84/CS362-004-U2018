        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:11
        -:    0:Programs:11
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function assertTrue called 118 returned 100% blocks executed 100%
      118:    8:void assertTrue(int val)
        -:    9:{
      118:   10:	if (val)
branch  0 taken 96% (fallthrough)
branch  1 taken 4%
        -:   11:	{
      113:   12:		printf("PASSED\n");
call    0 returned 100%
        -:   13:	}
        -:   14:	else
        -:   15:	{
        5:   16:		printf("FAILED\n");
call    0 returned 100%
        -:   17:	}
      118:   18:}
        -:   19:
function compare called 4445861 returned 100% blocks executed 100%
  4445861:   20:int compare(const void* a, const void* b) {
  4445861:   21:  if (*(int*)a > *(int*)b)
branch  0 taken 51% (fallthrough)
branch  1 taken 49%
  2280817:   22:    return 1;
  2165044:   23:  if (*(int*)a < *(int*)b)
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
  2163598:   24:    return -1;
     1446:   25:  return 0;
        -:   26:}
        -:   27:
function newGame called 0 returned 0% blocks executed 0%
    #####:   28:struct gameState* newGame() {
    #####:   29:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   30:  return g;
        -:   31:}
        -:   32:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   33:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   34:		  int k8, int k9, int k10) {
    #####:   35:  int* k = malloc(10 * sizeof(int));
    #####:   36:  k[0] = k1;
    #####:   37:  k[1] = k2;
    #####:   38:  k[2] = k3;
    #####:   39:  k[3] = k4;
    #####:   40:  k[4] = k5;
    #####:   41:  k[5] = k6;
    #####:   42:  k[6] = k7;
    #####:   43:  k[7] = k8;
    #####:   44:  k[8] = k9;
    #####:   45:  k[9] = k10;
    #####:   46:  return k;
        -:   47:}
        -:   48:
function initializeGame called 8 returned 100% blocks executed 88%
        8:   49:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   50:		   struct gameState *state) {
        -:   51:
        -:   52:  int i;
        -:   53:  int j;
        -:   54:  int it;			
        -:   55:  //set up random number generator
        8:   56:  SelectStream(1);
call    0 returned 100%
        8:   57:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   58:  
        -:   59:  //check number of players
        8:   60:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   61:    {
    #####:   62:      return -1;
        -:   63:    }
        -:   64:
        -:   65:  //set number of players
        8:   66:  state->numPlayers = numPlayers;
        -:   67:
        -:   68:  //check selected kingdom cards are different
       88:   69:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   70:    {
      880:   71:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   72:        {
      800:   73:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   74:	    {
    #####:   75:	      return -1;
        -:   76:	    }
        -:   77:        }
        -:   78:    }
        -:   79:
        -:   80:
        -:   81:  //initialize supply
        -:   82:  ///////////////////////////////
        -:   83:
        -:   84:  //set number of Curse cards
        8:   85:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   86:    {
        8:   87:      state->supplyCount[curse] = 10;
        -:   88:    }
    #####:   89:  else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:   90:    {
    #####:   91:      state->supplyCount[curse] = 20;
        -:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[curse] = 30;
        -:   96:    }
        -:   97:
        -:   98:  //set number of Victory cards
        8:   99:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  100:    {
        8:  101:      state->supplyCount[estate] = 8;
        8:  102:      state->supplyCount[duchy] = 8;
        8:  103:      state->supplyCount[province] = 8;
        -:  104:    }
        -:  105:  else
        -:  106:    {
    #####:  107:      state->supplyCount[estate] = 12;
    #####:  108:      state->supplyCount[duchy] = 12;
    #####:  109:      state->supplyCount[province] = 12;
        -:  110:    }
        -:  111:
        -:  112:  //set number of Treasure cards
        8:  113:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        8:  114:  state->supplyCount[silver] = 40;
        8:  115:  state->supplyCount[gold] = 30;
        -:  116:
        -:  117:  //set number of Kingdom cards
      168:  118:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  119:    {
     1320:  120:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  121:	{
     1240:  122:	  if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  123:	    {
        -:  124:	      //check if card is a 'Victory' Kingdom card
       80:  125:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  126:		{
        2:  127:		  if (numPlayers == 2){ 
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        1:  128:		    state->supplyCount[i] = 8; 
        -:  129:		  }
    #####:  130:		  else{ state->supplyCount[i] = 12; }
        -:  131:		}
        -:  132:	      else
        -:  133:		{
       79:  134:		  state->supplyCount[i] = 10;
        -:  135:		}
       80:  136:	      break;
        -:  137:	    }
        -:  138:	  else    //card is not in the set choosen for the game
        -:  139:	    {
     1160:  140:	      state->supplyCount[i] = -1;
        -:  141:	    }
        -:  142:	}
        -:  143:
        -:  144:    }
        -:  145:
        -:  146:  ////////////////////////
        -:  147:  //supply intilization complete
        -:  148:
        -:  149:  //set player decks
       24:  150:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  151:    {
       16:  152:      state->deckCount[i] = 0;
       64:  153:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  154:	{
       48:  155:	  state->deck[i][j] = estate;
       48:  156:	  state->deckCount[i]++;
        -:  157:	}
      128:  158:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  159:	{
      112:  160:	  state->deck[i][j] = copper;
      112:  161:	  state->deckCount[i]++;		
        -:  162:	}
        -:  163:    }
        -:  164:
        -:  165:  //shuffle player decks
       24:  166:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  167:    {
       16:  168:      if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  169:	{
    #####:  170:	  return -1;
        -:  171:	}
        -:  172:    }
        -:  173:
        -:  174:  //draw player hands
       24:  175:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  176:    {  
        -:  177:      //initialize hand size to zero
       16:  178:      state->handCount[i] = 0;
       16:  179:      state->discardCount[i] = 0;
        -:  180:      //draw 5 cards
        -:  181:      // for (j = 0; j < 5; j++)
        -:  182:      //	{
        -:  183:      //	  drawCard(i, state);
        -:  184:      //	}
        -:  185:    }
        -:  186:  
        -:  187:  //set embargo tokens to 0 for all supply piles
      224:  188:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  189:    {
      216:  190:      state->embargoTokens[i] = 0;
        -:  191:    }
        -:  192:
        -:  193:  //initialize first player's turn
        8:  194:  state->outpostPlayed = 0;
        8:  195:  state->phase = 0;
        8:  196:  state->numActions = 1;
        8:  197:  state->numBuys = 1;
        8:  198:  state->playedCardCount = 0;
        8:  199:  state->whoseTurn = 0;
        8:  200:  state->handCount[state->whoseTurn] = 0;
        -:  201:  //int it; move to top
        -:  202:
        -:  203:  //Moved draw cards to here, only drawing at the start of a turn
       48:  204:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
       40:  205:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  206:  }
        -:  207:
        8:  208:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  209:
        8:  210:  return 0;
        -:  211:}
        -:  212:
function shuffle called 5146 returned 100% blocks executed 100%
     5146:  213:int shuffle(int player, struct gameState *state) {
        -:  214: 
        -:  215:
        -:  216:  int newDeck[MAX_DECK];
     5146:  217:  int newDeckPos = 0;
        -:  218:  int card;
        -:  219:  int i;
        -:  220:
     5146:  221:  if (state->deckCount[player] < 1)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
     2565:  222:    return -1;
     2581:  223:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 100%
        -:  224:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  225:
   652680:  226:  while (state->deckCount[player] > 0) {
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
   647518:  227:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
   647518:  228:    newDeck[newDeckPos] = state->deck[player][card];
   647518:  229:    newDeckPos++;
 47923745:  230:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
 47276227:  231:      state->deck[player][i] = state->deck[player][i+1];
        -:  232:    }
   647518:  233:    state->deckCount[player]--;
        -:  234:  }
   650099:  235:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
   647518:  236:    state->deck[player][i] = newDeck[i];
   647518:  237:    state->deckCount[player]++;
        -:  238:  }
        -:  239:
     2581:  240:  return 0;
        -:  241:}
        -:  242:
function playCard called 0 returned 0% blocks executed 0%
    #####:  243:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  244:{	
        -:  245:  int card;
    #####:  246:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  247:
        -:  248:  //check if it is the right phase
    #####:  249:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  250:    {
    #####:  251:      return -1;
        -:  252:    }
        -:  253:	
        -:  254:  //check if player has enough actions
    #####:  255:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  256:    {
    #####:  257:      return -1;
        -:  258:    }
        -:  259:	
        -:  260:  //get card played
    #####:  261:  card = handCard(handPos, state);
call    0 never executed
        -:  262:	
        -:  263:  //check if selected card is an action
    #####:  264:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  265:    {
    #####:  266:      return -1;
        -:  267:    }
        -:  268:	
        -:  269:  //play card
    #####:  270:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  271:    {
    #####:  272:      return -1;
        -:  273:    }
        -:  274:	
        -:  275:  //reduce number of actions
    #####:  276:  state->numActions--;
        -:  277:
        -:  278:  //update coins (Treasure cards may be added with card draws)
    #####:  279:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  280:	
    #####:  281:  return 0;
        -:  282:}
        -:  283:
function buyCard called 1 returned 100% blocks executed 79%
        1:  284:int buyCard(int supplyPos, struct gameState *state) {
        -:  285:  int who;
        -:  286:  if (DEBUG){
        -:  287:    printf("Entering buyCard...\n");
        -:  288:  }
        -:  289:
        -:  290:  // I don't know what to do about the phase thing.
        -:  291:
        1:  292:  who = state->whoseTurn;
        -:  293:
        1:  294:  if (state->numBuys < 1){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  295:    if (DEBUG)
        -:  296:      printf("You do not have any buys left\n");
    #####:  297:    return -1;
        1:  298:  } else if (supplyCount(supplyPos, state) <1){
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  299:    if (DEBUG)
        -:  300:      printf("There are not any of that type of card left\n");
    #####:  301:    return -1;
        1:  302:  } else if (state->coins < getCost(supplyPos)){
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  303:    if (DEBUG) 
        -:  304:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  305:    return -1;
        -:  306:  } else {
        1:  307:    state->phase=1;
        -:  308:    //state->supplyCount[supplyPos]--;
        1:  309:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 returned 100%
        -:  310:  
        1:  311:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 returned 100%
        1:  312:    state->numBuys--;
        -:  313:    if (DEBUG)
        -:  314:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  315:  }
        -:  316:
        -:  317:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  318:  //state->discardCount[who]++;
        -:  319:    
        1:  320:  return 0;
        -:  321:}
        -:  322:
function numHandCards called 20 returned 100% blocks executed 100%
       20:  323:int numHandCards(struct gameState *state) {
       20:  324:  return state->handCount[ whoseTurn(state) ];
call    0 returned 100%
        -:  325:}
        -:  326:
function handCard called 12 returned 100% blocks executed 100%
       12:  327:int handCard(int handPos, struct gameState *state) {
       12:  328:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
       12:  329:  return state->hand[currentPlayer][handPos];
        -:  330:}
        -:  331:
function supplyCount called 35 returned 100% blocks executed 100%
       35:  332:int supplyCount(int card, struct gameState *state) {
       35:  333:  return state->supplyCount[card];
        -:  334:}
        -:  335:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  336:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  337:  int i;
    #####:  338:  int count = 0;
        -:  339:
    #####:  340:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  341:    {
    #####:  342:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  343:    }
        -:  344:
    #####:  345:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  346:    {
    #####:  347:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  348:    }
        -:  349:
    #####:  350:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  351:    {
    #####:  352:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  353:    }
        -:  354:
    #####:  355:  return count;
        -:  356:}
        -:  357:
function whoseTurn called 30072 returned 100% blocks executed 100%
    30072:  358:int whoseTurn(struct gameState *state) {
    30072:  359:  return state->whoseTurn;
        -:  360:}
        -:  361:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  362:int endTurn(struct gameState *state) {
        -:  363:  int k;
        -:  364:  int i;
    #####:  365:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  366:  
        -:  367:  //Discard hand
    #####:  368:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  369:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  370:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  371:  }
    #####:  372:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  373:    
        -:  374:  //Code for determining the player
    #####:  375:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  376:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  377:  }
        -:  378:  else{
    #####:  379:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  380:  }
        -:  381:
    #####:  382:  state->outpostPlayed = 0;
    #####:  383:  state->phase = 0;
    #####:  384:  state->numActions = 1;
    #####:  385:  state->coins = 0;
    #####:  386:  state->numBuys = 1;
    #####:  387:  state->playedCardCount = 0;
    #####:  388:  state->handCount[state->whoseTurn] = 0;
        -:  389:
        -:  390:  //int k; move to top
        -:  391:  //Next player draws hand
    #####:  392:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  393:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  394:  }
        -:  395:
        -:  396:  //Update money
    #####:  397:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  398:
    #####:  399:  return 0;
        -:  400:}
        -:  401:
function isGameOver called 30 returned 100% blocks executed 100%
       30:  402:int isGameOver(struct gameState *state) {
        -:  403:  int i;
        -:  404:  int j;
        -:  405:	
        -:  406:  //if stack of Province cards is empty, the game ends
       30:  407:  if (state->supplyCount[province] == 0)
branch  0 taken 53% (fallthrough)
branch  1 taken 47%
        -:  408:    {
       16:  409:      return 1;
        -:  410:    }
        -:  411:
        -:  412:  //if three supply pile are at 0, the game ends
       14:  413:  j = 0;
      364:  414:  for (i = 0; i < 25; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  415:    {
      350:  416:      if (state->supplyCount[i] == 0)
branch  0 taken 5% (fallthrough)
branch  1 taken 95%
        -:  417:	{
       16:  418:	  j++;
        -:  419:	}
        -:  420:    }
       14:  421:  if ( j >= 3)
branch  0 taken 14% (fallthrough)
branch  1 taken 86%
        -:  422:    {
        2:  423:      return 1;
        -:  424:    }
        -:  425:
       12:  426:  return 0;
        -:  427:}
        -:  428:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  429:int scoreFor (int player, struct gameState *state) {
        -:  430:
        -:  431:  int i;
    #####:  432:  int score = 0;
        -:  433:  //score from hand
    #####:  434:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  435:    {
    #####:  436:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  441:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  442:    }
        -:  443:
        -:  444:  //score from discard
    #####:  445:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  446:    {
    #####:  447:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  448:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  452:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  453:    }
        -:  454:
        -:  455:  //score from deck
    #####:  456:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  457:    {
    #####:  458:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  459:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  460:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  461:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  462:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  463:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  464:    }
        -:  465:
    #####:  466:  return score;
        -:  467:}
        -:  468:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  469:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  470:  int i;	
        -:  471:  int j;
        -:  472:  int highScore;
        -:  473:  int currentPlayer;
        -:  474:
        -:  475:  //get score for each player
    #####:  476:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  477:    {
        -:  478:      //set unused player scores to -9999
    #####:  479:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  480:	{
    #####:  481:	  players[i] = -9999;
        -:  482:	}
        -:  483:      else
        -:  484:	{
    #####:  485:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  486:	}
        -:  487:    }
        -:  488:
        -:  489:  //find highest score
    #####:  490:  j = 0;
    #####:  491:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  492:    {
    #####:  493:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  494:	{
    #####:  495:	  j = i;
        -:  496:	}
        -:  497:    }
    #####:  498:  highScore = players[j];
        -:  499:
        -:  500:  //add 1 to players who had less turns
    #####:  501:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  502:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  503:    {
    #####:  504:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  505:	{
    #####:  506:	  players[i]++;
        -:  507:	}
        -:  508:    }
        -:  509:
        -:  510:  //find new highest score
    #####:  511:  j = 0;
    #####:  512:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  513:    {
    #####:  514:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  515:	{
    #####:  516:	  j = i;
        -:  517:	}
        -:  518:    }
    #####:  519:  highScore = players[j];
        -:  520:
        -:  521:  //set winners in array to 1 and rest to 0
    #####:  522:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  523:    {
    #####:  524:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  525:	{
    #####:  526:	  players[i] = 1;
        -:  527:	}
        -:  528:      else
        -:  529:	{
    #####:  530:	  players[i] = 0;
        -:  531:	}
        -:  532:    }
        -:  533:
    #####:  534:  return 0;
        -:  535:}
        -:  536:
function drawCard called 778829 returned 100% blocks executed 92%
   778829:  537:int drawCard(int player, struct gameState *state)
        -:  538:{	int count;
        -:  539:  int deckCounter;
   778829:  540:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
        -:  541:    
        -:  542:    //Step 1 Shuffle the discard pile back into a deck
        -:  543:    int i;
        -:  544:    //Move discard to deck
   649923:  545:    for (i = 0; i < state->discardCount[player];i++){
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
   647358:  546:      state->deck[player][i] = state->discard[player][i];
   647358:  547:      state->discard[player][i] = -1;
        -:  548:    }
        -:  549:
     2565:  550:    state->deckCount[player] = state->discardCount[player];
     2565:  551:    state->discardCount[player] = 0;//Reset discard
        -:  552:
        -:  553:    //Shufffle the deck
     2565:  554:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 returned 100%
        -:  555:   
        -:  556:    if (DEBUG){//Debug statements
        -:  557:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  558:    }
        -:  559:    
     2565:  560:    state->discardCount[player] = 0;
        -:  561:
        -:  562:    //Step 2 Draw Card
     2565:  563:    count = state->handCount[player];//Get current player's hand count
        -:  564:    
        -:  565:    if (DEBUG){//Debug statements
        -:  566:      printf("Current hand count: %d\n", count);
        -:  567:    }
        -:  568:    
     2565:  569:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  570:
     2565:  571:    if (deckCounter == 0)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  572:      return -1;
        -:  573:
     2565:  574:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
     2565:  575:    state->deckCount[player]--;
     2565:  576:    state->handCount[player]++;//Increment hand count
        -:  577:  }
        -:  578:
        -:  579:  else{
   776264:  580:    int count = state->handCount[player];//Get current hand count for player
        -:  581:    int deckCounter;
        -:  582:    if (DEBUG){//Debug statements
        -:  583:      printf("Current hand count: %d\n", count);
        -:  584:    }
        -:  585:
   776264:  586:    deckCounter = state->deckCount[player];//Create holder for the deck count
   776264:  587:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
   776264:  588:    state->deckCount[player]--;
   776264:  589:    state->handCount[player]++;//Increment hand count
        -:  590:  }
        -:  591:
   778829:  592:  return 0;
        -:  593:}
        -:  594:
function getCost called 70 returned 100% blocks executed 97%
       70:  595:int getCost(int cardNumber)
        -:  596:{
       70:  597:  switch( cardNumber ) 
branch  0 taken 7%
branch  1 taken 4%
branch  2 taken 3%
branch  3 taken 4%
branch  4 taken 13%
branch  5 taken 6%
branch  6 taken 3%
branch  7 taken 3%
branch  8 taken 3%
branch  9 taken 3%
branch 10 taken 3%
branch 11 taken 3%
branch 12 taken 3%
branch 13 taken 3%
branch 14 taken 3%
branch 15 taken 3%
branch 16 taken 3%
branch 17 taken 3%
branch 18 taken 3%
branch 19 taken 3%
branch 20 taken 3%
branch 21 taken 3%
branch 22 taken 6%
branch 23 taken 3%
branch 24 taken 3%
branch 25 taken 3%
branch 26 taken 3%
branch 27 taken 0%
        -:  598:    {
        -:  599:    case curse:
        5:  600:      return 0;
        -:  601:    case estate:
        3:  602:      return 2;
        -:  603:    case duchy:
        2:  604:      return 5;
        -:  605:    case province:
        3:  606:      return 8;
        -:  607:    case copper:
        9:  608:      return 0;
        -:  609:    case silver:
        4:  610:      return 3;
        -:  611:    case gold:
        2:  612:      return 6;
        -:  613:    case adventurer:
        2:  614:      return 6;
        -:  615:    case council_room:
        2:  616:      return 5;
        -:  617:    case feast:
        2:  618:      return 4;
        -:  619:    case gardens:
        2:  620:      return 4;
        -:  621:    case mine:
        2:  622:      return 5;
        -:  623:    case remodel:
        2:  624:      return 4;
        -:  625:    case smithy:
        2:  626:      return 4;
        -:  627:    case village:
        2:  628:      return 3;
        -:  629:    case baron:
        2:  630:      return 4;
        -:  631:    case great_hall:
        2:  632:      return 3;
        -:  633:    case minion:
        2:  634:      return 5;
        -:  635:    case steward:
        2:  636:      return 3;
        -:  637:    case tribute:
        2:  638:      return 5;
        -:  639:    case ambassador:
        2:  640:      return 3;
        -:  641:    case cutpurse:
        2:  642:      return 4;
        -:  643:    case embargo: 
        4:  644:      return 2;
        -:  645:    case outpost:
        2:  646:      return 5;
        -:  647:    case salvager:
        2:  648:      return 4;
        -:  649:    case sea_hag:
        2:  650:      return 4;
        -:  651:    case treasure_map:
        2:  652:      return 4;
        -:  653:    }
        -:  654:	
    #####:  655:  return -1;
        -:  656:}
        -:  657:
        -:  658:
function playSmithy called 5007 returned 100% blocks executed 100%
     5007:  659:int playSmithy(struct gameState *state, int handPos)
        -:  660:{
     5007:  661:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
    15021:  662:  for (int i = 0; i < 2; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  663:  {
    10014:  664:    drawCard(currentPlayer, state);
call    0 returned 100%
        -:  665:  }
        -:  666:
     5007:  667:  return 0;
        -:  668:}
        -:  669:
        -:  670:
function playAdventurer called 5002 returned 100% blocks executed 100%
     5002:  671:int playAdventurer(struct gameState *state)
        -:  672:{
     5002:  673:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
     5002:  674:  int drawntreasure=0;
        -:  675:  int cardDrawn;
        -:  676:  int temphand[MAX_HAND];// moved above the if statement
     5002:  677:  int z = 0;// this is the counter for the temp hand
        -:  678:
   760083:  679:  while(drawntreasure<2) {
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
   750079:  680:    if (state->deckCount[currentPlayer] <1) {//if the deck is empty we need to shuffle discard and add to deck
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
     2565:  681:      shuffle(currentPlayer, state);
call    0 returned 100%
        -:  682:    }
        -:  683:
   750079:  684:    drawCard(currentPlayer, state);
call    0 returned 100%
   750079:  685:    cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -:  686:    
   750079:  687:    if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold) {
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
branch  2 taken 99% (fallthrough)
branch  3 taken 1%
branch  4 taken 1% (fallthrough)
branch  5 taken 99%
    10004:  688:      drawntreasure++;
        -:  689:    }
        -:  690:    else {
   740075:  691:      temphand[z]=cardDrawn;
   740075:  692:      state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
   740075:  693:      z++;
        -:  694:    }
        -:  695:  }
        -:  696:
   750079:  697:  while(z-1>=0) {
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
   740075:  698:    state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
   740075:  699:    z=z-1;
        -:  700:  }
        -:  701:
     5002:  702:  return 0;
        -:  703:}
        -:  704:
        -:  705:
function playRemodel called 6 returned 100% blocks executed 93%
        6:  706:int playRemodel(struct gameState *state, int handPos, int choice1, int choice2)
        -:  707:{
        6:  708:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
        -:  709:  int j;
        -:  710:
        6:  711:  j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  712:
        6:  713:  int trashedCardCost = getCost(state->hand[currentPlayer][choice1]);
call    0 returned 100%
        6:  714:  int gainCardCost = getCost(choice2);
call    0 returned 100%
        -:  715:
        6:  716:  if (trashedCardCost + 0 < gainCardCost)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -:  717:  {
        3:  718:      return -1;
        -:  719:  }
        -:  720:
        3:  721:  gainCard(choice2, state, 0, currentPlayer);
call    0 returned 100%
        -:  722:
        -:  723:  //discard card from hand
        3:  724:  discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        -:  725:
        -:  726:  //discard trashed card
        3:  727:  for (int i = 0; i < state->handCount[currentPlayer]; i++) {
branch  0 taken 100%
branch  1 taken 0% (fallthrough)
        3:  728:    if (state->hand[currentPlayer][i] == j) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        3:  729:      discardCard(i, currentPlayer, state, 0);			
call    0 returned 100%
        3:  730:      break;
        -:  731:    }
        -:  732:  }
        -:  733:
        3:  734:  return 0;
        -:  735:}
        -:  736:
        -:  737:
function playSeaHag called 0 returned 0% blocks executed 0%
    #####:  738:int playSeaHag(struct gameState *state)
        -:  739:{
    #####:  740:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  741:
    #####:  742:  for (int i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####:  743:    if (i != currentPlayer) {
branch  0 never executed
branch  1 never executed
    #####:  744:      state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    
    #####:  745:      state->deckCount[i]--;
    #####:  746:      state->discardCount[i]++;
    #####:  747:      state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -:  748:    }
        -:  749:  }
        -:  750:
    #####:  751:  return 0;
        -:  752:}
        -:  753:
        -:  754:
function playCouncilRoom called 5005 returned 100% blocks executed 100%
     5005:  755:int playCouncilRoom(struct gameState *state, int handPos)
        -:  756:{
     5005:  757:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
        -:  758:  
        -:  759:  //+4 Cards
    15015:  760:  for (int i = 0; i < 2; i++) {
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
    10010:  761:    drawCard(currentPlayer, state);
call    0 returned 100%
        -:  762:  }
        -:  763:
        -:  764:  //+1 Buy
     5005:  765:  state->numBuys++;
        -:  766:
        -:  767:  //Each other player draws a card
    18696:  768:  for (int i = 0; i < state->numPlayers; i++) {
branch  0 taken 73%
branch  1 taken 27% (fallthrough)
    13691:  769:    if (i != currentPlayer) {
branch  0 taken 63% (fallthrough)
branch  1 taken 37%
     8686:  770:      drawCard(i, state);
call    0 returned 100%
        -:  771:    }
        -:  772:  }
        -:  773:
        -:  774:  //put played card in played card pile
     5005:  775:  discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        -:  776:
     5005:  777:  return 0;
        -:  778:}
        -:  779:
        -:  780:
function cardEffect called 15020 returned 100% blocks executed 5%
    15020:  781:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  782:{
        -:  783:  int i;
        -:  784:  int j;
        -:  785:  int k;
        -:  786:  int x;
        -:  787:  int index;
    15020:  788:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
    15020:  789:  int nextPlayer = currentPlayer + 1;
        -:  790:
    15020:  791:  int tributeRevealedCards[2] = {-1, -1};
        -:  792:  int temphand[MAX_HAND];// moved above the if statement
    15020:  793:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 39% (fallthrough)
branch  1 taken 61%
     5910:  794:    nextPlayer = 0;
        -:  795:  }
        -:  796:  
        -:  797:	
        -:  798:  //uses switch to select card and perform actions
    15020:  799:  switch( card ) 
branch  0 taken 33%
branch  1 taken 33%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 1%
branch  6 taken 33%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  800:    {
        -:  801:    case adventurer:
     5002:  802:      return playAdventurer(state);
call    0 returned 100%
        -:  803:			
        -:  804:    case council_room:
     5005:  805:      return playCouncilRoom(state, handPos);
call    0 returned 100%
        -:  806:			
        -:  807:    case feast:
        -:  808:      //gain card with cost up to 5
        -:  809:      //Backup hand
    #####:  810:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  811:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  812:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  813:      }
        -:  814:      //Backup hand
        -:  815:
        -:  816:      //Update Coins for Buy
    #####:  817:      updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  818:      x = 1;//Condition to loop on
    #####:  819:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  820:	if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  821:	  if (DEBUG)
        -:  822:	    printf("None of that card left, sorry!\n");
        -:  823:
        -:  824:	  if (DEBUG){
        -:  825:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  826:	  }
        -:  827:	}
    #####:  828:	else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  829:	  printf("That card is too expensive!\n");
call    0 never executed
        -:  830:
        -:  831:	  if (DEBUG){
        -:  832:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  833:	  }
        -:  834:	}
        -:  835:	else{
        -:  836:
        -:  837:	  if (DEBUG){
        -:  838:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  839:	  }
        -:  840:
    #####:  841:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  842:	  x = 0;//No more buying cards
        -:  843:
        -:  844:	  if (DEBUG){
        -:  845:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  846:	  }
        -:  847:
        -:  848:	}
        -:  849:      }     
        -:  850:
        -:  851:      //Reset Hand
    #####:  852:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  853:	state->hand[currentPlayer][i] = temphand[i];
    #####:  854:	temphand[i] = -1;
        -:  855:      }
        -:  856:      //Reset Hand
        -:  857:      			
    #####:  858:      return 0;
        -:  859:			
        -:  860:    case gardens:
    #####:  861:      return -1;
        -:  862:			
        -:  863:    case mine:
    #####:  864:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  865:
    #####:  866:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  867:	{
    #####:  868:	  return -1;
        -:  869:	}
        -:  870:		
    #####:  871:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  872:	{
    #####:  873:	  return -1;
        -:  874:	}
        -:  875:
    #####:  876:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  877:	{
    #####:  878:	  return -1;
        -:  879:	}
        -:  880:
    #####:  881:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  882:
        -:  883:      //discard card from hand
    #####:  884:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  885:
        -:  886:      //discard trashed card
    #####:  887:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  888:	{
    #####:  889:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  890:	    {
    #####:  891:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  892:	      break;
        -:  893:	    }
        -:  894:	}
        -:  895:			
    #####:  896:      return 0;
        -:  897:			
        -:  898:    case remodel:
        6:  899:      return playRemodel(state, handPos, choice1, choice2);
call    0 returned 100%
        -:  900:		
        -:  901:    case smithy:
     5007:  902:      return playSmithy(state, handPos);
call    0 returned 100%
        -:  903:		
        -:  904:    case village:
        -:  905:      //+1 Card
    #####:  906:      drawCard(currentPlayer, state);
call    0 never executed
        -:  907:			
        -:  908:      //+2 Actions
    #####:  909:      state->numActions = state->numActions + 2;
        -:  910:			
        -:  911:      //discard played card from hand
    #####:  912:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  913:      return 0;
        -:  914:		
        -:  915:    case baron:
    #####:  916:      state->numBuys++;//Increase buys by 1!
    #####:  917:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  918:	int p = 0;//Iterator for hand!
    #####:  919:	int card_not_discarded = 1;//Flag for discard set!
    #####:  920:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  921:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  922:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  923:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  924:	    state->discardCount[currentPlayer]++;
    #####:  925:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  926:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  927:	    }
    #####:  928:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  929:	    state->handCount[currentPlayer]--;
    #####:  930:	    card_not_discarded = 0;//Exit the loop
        -:  931:	  }
    #####:  932:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  933:	    if(DEBUG) {
        -:  934:	      printf("No estate cards in your hand, invalid choice\n");
        -:  935:	      printf("Must gain an estate if there are any\n");
        -:  936:	    }
    #####:  937:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  938:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  939:	      state->supplyCount[estate]--;//Decrement estates
    #####:  940:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  941:		isGameOver(state);
call    0 never executed
        -:  942:	      }
        -:  943:	    }
    #####:  944:	    card_not_discarded = 0;//Exit the loop
        -:  945:	  }
        -:  946:			    
        -:  947:	  else{
    #####:  948:	    p++;//Next card
        -:  949:	  }
        -:  950:	}
        -:  951:      }
        -:  952:			    
        -:  953:      else{
    #####:  954:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  955:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####:  956:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  957:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  958:	    isGameOver(state);
call    0 never executed
        -:  959:	  }
        -:  960:	}
        -:  961:      }
        -:  962:	    
        -:  963:      
    #####:  964:      return 0;
        -:  965:		
        -:  966:    case great_hall:
        -:  967:      //+1 Card
    #####:  968:      drawCard(currentPlayer, state);
call    0 never executed
        -:  969:			
        -:  970:      //+1 Actions
    #####:  971:      state->numActions++;
        -:  972:			
        -:  973:      //discard card from hand
    #####:  974:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  975:      return 0;
        -:  976:		
        -:  977:    case minion:
        -:  978:      //+1 action
    #####:  979:      state->numActions++;
        -:  980:			
        -:  981:      //discard card from hand
    #####:  982:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  983:			
    #####:  984:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  985:	{
    #####:  986:	  state->coins = state->coins + 2;
        -:  987:	}
        -:  988:			
    #####:  989:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  990:	{
        -:  991:	  //discard hand
    #####:  992:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  993:	    {
    #####:  994:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  995:	    }
        -:  996:				
        -:  997:	  //draw 4
    #####:  998:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  999:	    {
    #####: 1000:	      drawCard(currentPlayer, state);
call    0 never executed
        -: 1001:	    }
        -: 1002:				
        -: 1003:	  //other players discard hand and redraw if hand size > 4
    #####: 1004:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1005:	    {
    #####: 1006:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1007:		{
    #####: 1008:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -: 1009:		    {
        -: 1010:		      //discard hand
    #####: 1011:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -: 1012:			{
    #####: 1013:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -: 1014:			}
        -: 1015:							
        -: 1016:		      //draw 4
    #####: 1017:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -: 1018:			{
    #####: 1019:			  drawCard(i, state);
call    0 never executed
        -: 1020:			}
        -: 1021:		    }
        -: 1022:		}
        -: 1023:	    }
        -: 1024:				
        -: 1025:	}
    #####: 1026:      return 0;
        -: 1027:		
        -: 1028:    case steward:
    #####: 1029:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -: 1030:	{
        -: 1031:	  //+2 cards
    #####: 1032:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1033:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1034:	}
    #####: 1035:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -: 1036:	{
        -: 1037:	  //+2 coins
    #####: 1038:	  state->coins = state->coins + 2;
        -: 1039:	}
        -: 1040:      else
        -: 1041:	{
        -: 1042:	  //trash 2 cards in hand
    #####: 1043:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####: 1044:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -: 1045:	}
        -: 1046:			
        -: 1047:      //discard card from hand
    #####: 1048:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1049:      return 0;
        -: 1050:		
        -: 1051:    case tribute:
    #####: 1052:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####: 1053:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1054:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1055:	  state->deckCount[nextPlayer]--;
        -: 1056:	}
    #####: 1057:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1058:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1059:	  state->discardCount[nextPlayer]--;
        -: 1060:	}
        -: 1061:	else{
        -: 1062:	  //No Card to Reveal
        -: 1063:	  if (DEBUG){
        -: 1064:	    printf("No cards to reveal\n");
        -: 1065:	  }
        -: 1066:	}
        -: 1067:      }
        -: 1068:	    
        -: 1069:      else{
    #####: 1070:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1071:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1072:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1073:	    state->deckCount[nextPlayer]++;
    #####: 1074:	    state->discard[nextPlayer][i] = -1;
    #####: 1075:	    state->discardCount[nextPlayer]--;
        -: 1076:	  }
        -: 1077:			    
    #####: 1078:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -: 1079:	} 
    #####: 1080:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1081:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1082:	state->deckCount[nextPlayer]--;
    #####: 1083:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1084:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1085:	state->deckCount[nextPlayer]--;
        -: 1086:      }    
        -: 1087:		       
    #####: 1088:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####: 1089:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1090:	state->playedCardCount++;
    #####: 1091:	tributeRevealedCards[1] = -1;
        -: 1092:      }
        -: 1093:
    #####: 1094:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1095:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1096:	  state->coins += 2;
        -: 1097:	}
        -: 1098:		    
    #####: 1099:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1100:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1101:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1102:	}
        -: 1103:	else{//Action Card
    #####: 1104:	  state->numActions = state->numActions + 2;
        -: 1105:	}
        -: 1106:      }
        -: 1107:	    
    #####: 1108:      return 0;
        -: 1109:		
        -: 1110:    case ambassador:
    #####: 1111:      j = 0;		//used to check if player has enough cards to discard
        -: 1112:
    #####: 1113:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1114:	{
    #####: 1115:	  return -1;				
        -: 1116:	}
        -: 1117:
    #####: 1118:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1119:	{
    #####: 1120:	  return -1;
        -: 1121:	}
        -: 1122:
    #####: 1123:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1124:	{
    #####: 1125:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1126:	    {
    #####: 1127:	      j++;
        -: 1128:	    }
        -: 1129:	}
    #####: 1130:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1131:	{
    #####: 1132:	  return -1;				
        -: 1133:	}
        -: 1134:
        -: 1135:      if (DEBUG) 
        -: 1136:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1137:
        -: 1138:      //increase supply count for choosen card by amount being discarded
    #####: 1139:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1140:			
        -: 1141:      //each other player gains a copy of revealed card
    #####: 1142:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1143:	{
    #####: 1144:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1145:	    {
    #####: 1146:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1147:	    }
        -: 1148:	}
        -: 1149:
        -: 1150:      //discard played card from hand
    #####: 1151:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1152:
        -: 1153:      //trash copies of cards returned to supply
    #####: 1154:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1155:	{
    #####: 1156:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1157:	    {
    #####: 1158:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1159:		{
    #####: 1160:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1161:		  break;
        -: 1162:		}
        -: 1163:	    }
        -: 1164:	}			
        -: 1165:
    #####: 1166:      return 0;
        -: 1167:		
        -: 1168:    case cutpurse:
        -: 1169:
    #####: 1170:      updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1171:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1172:	{
    #####: 1173:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1174:	    {
    #####: 1175:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1176:		{
    #####: 1177:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1178:		    {
    #####: 1179:		      discardCard(j, i, state, 0);
call    0 never executed
    #####: 1180:		      break;
        -: 1181:		    }
    #####: 1182:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1183:		    {
    #####: 1184:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1185:			{
        -: 1186:			  if (DEBUG)
        -: 1187:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1188:			}	
    #####: 1189:		      break;
        -: 1190:		    }		
        -: 1191:		}
        -: 1192:					
        -: 1193:	    }
        -: 1194:				
        -: 1195:	}				
        -: 1196:
        -: 1197:      //discard played card from hand
    #####: 1198:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1199:
    #####: 1200:      return 0;
        -: 1201:
        -: 1202:		
        -: 1203:    case embargo: 
        -: 1204:      //+2 Coins
    #####: 1205:      state->coins = state->coins + 2;
        -: 1206:			
        -: 1207:      //see if selected pile is in play
    #####: 1208:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1209:	{
    #####: 1210:	  return -1;
        -: 1211:	}
        -: 1212:			
        -: 1213:      //add embargo token to selected supply pile
    #####: 1214:      state->embargoTokens[choice1]++;
        -: 1215:			
        -: 1216:      //trash card
    #####: 1217:      discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####: 1218:      return 0;
        -: 1219:		
        -: 1220:    case outpost:
        -: 1221:      //set outpost flag
    #####: 1222:      state->outpostPlayed++;
        -: 1223:			
        -: 1224:      //discard card
    #####: 1225:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1226:      return 0;
        -: 1227:		
        -: 1228:    case salvager:
        -: 1229:      //+1 buy
    #####: 1230:      state->numBuys++;
        -: 1231:			
    #####: 1232:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1233:	{
        -: 1234:	  //gain coins equal to trashed card
    #####: 1235:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1236:	  //trash card
    #####: 1237:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1238:	}
        -: 1239:			
        -: 1240:      //discard card
    #####: 1241:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1242:      return 0;
        -: 1243:		
        -: 1244:    case sea_hag:
    #####: 1245:      return playSeaHag(state);
call    0 never executed
        -: 1246:		
        -: 1247:    case treasure_map:
        -: 1248:      //search hand for another treasure_map
    #####: 1249:      index = -1;
    #####: 1250:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1251:	{
    #####: 1252:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1253:	    {
    #####: 1254:	      index = i;
    #####: 1255:	      break;
        -: 1256:	    }
        -: 1257:	}
    #####: 1258:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1259:	{
        -: 1260:	  //trash both treasure cards
    #####: 1261:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1262:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1263:
        -: 1264:	  //gain 4 Gold cards
    #####: 1265:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1266:	    {
    #####: 1267:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1268:	    }
        -: 1269:				
        -: 1270:	  //return success
    #####: 1271:	  return 1;
        -: 1272:	}
        -: 1273:			
        -: 1274:      //no second treasure_map found in hand
    #####: 1275:      return -1;
        -: 1276:    }
        -: 1277:	
    #####: 1278:  return -1;
        -: 1279:}
        -: 1280:
function discardCard called 5011 returned 100% blocks executed 78%
     5011: 1281:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1282:{
        -: 1283:	
        -: 1284:  //if card is not trashed, added to Played pile 
     5011: 1285:  if (trashFlag < 1)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 1286:    {
        -: 1287:      //add card to played pile
     5011: 1288:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
     5011: 1289:      state->playedCardCount++;
        -: 1290:    }
        -: 1291:	
        -: 1292:  //set played card to -1
     5011: 1293:  state->hand[currentPlayer][handPos] = -1;
        -: 1294:	
        -: 1295:  //remove card from player's hand
     5011: 1296:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1297:    {
        -: 1298:      //reduce number of cards in hand
    #####: 1299:      state->handCount[currentPlayer]--;
        -: 1300:    }
     5011: 1301:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1302:    {
        -: 1303:      //reduce number of cards in hand
    #####: 1304:      state->handCount[currentPlayer]--;
        -: 1305:    }
        -: 1306:  else 	
        -: 1307:    {
        -: 1308:      //replace discarded card with last card in hand
     5011: 1309:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1310:      //set last card to -1
     5011: 1311:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1312:      //reduce number of cards in hand
     5011: 1313:      state->handCount[currentPlayer]--;
        -: 1314:    }
        -: 1315:	
     5011: 1316:  return 0;
        -: 1317:}
        -: 1318:
function gainCard called 4 returned 100% blocks executed 70%
        4: 1319:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1320:{
        -: 1321:  //Note: supplyPos is enum of choosen card
        -: 1322:	
        -: 1323:  //check if supply pile is empty (0) or card is not used in game (-1)
        4: 1324:  if ( supplyCount(supplyPos, state) < 1 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -: 1325:    {
    #####: 1326:      return -1;
        -: 1327:    }
        -: 1328:	
        -: 1329:  //added card for [whoseTurn] current player:
        -: 1330:  // toFlag = 0 : add to discard
        -: 1331:  // toFlag = 1 : add to deck
        -: 1332:  // toFlag = 2 : add to hand
        -: 1333:
        4: 1334:  if (toFlag == 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1335:    {
    #####: 1336:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1337:      state->deckCount[player]++;
        -: 1338:    }
        4: 1339:  else if (toFlag == 2)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1340:    {
    #####: 1341:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1342:      state->handCount[player]++;
        -: 1343:    }
        -: 1344:  else
        -: 1345:    {
        4: 1346:      state->discard[player][ state->discardCount[player] ] = supplyPos;
        4: 1347:      state->discardCount[player]++;
        -: 1348:    }
        -: 1349:	
        -: 1350:  //decrease number in supply pile
        4: 1351:  state->supplyCount[supplyPos]--;
        -: 1352:	 
        4: 1353:  return 0;
        -: 1354:}
        -: 1355:
function updateCoins called 8 returned 100% blocks executed 82%
        8: 1356:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1357:{
        -: 1358:  int i;
        -: 1359:	
        -: 1360:  //reset coin count
        8: 1361:  state->coins = 0;
        -: 1362:
        -: 1363:  //add coins for each Treasure card in player's hand
       48: 1364:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -: 1365:    {
       40: 1366:      if (state->hand[player][i] == copper)
branch  0 taken 80% (fallthrough)
branch  1 taken 20%
        -: 1367:	{
       32: 1368:	  state->coins += 1;
        -: 1369:	}
        8: 1370:      else if (state->hand[player][i] == silver)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1371:	{
    #####: 1372:	  state->coins += 2;
        -: 1373:	}
        8: 1374:      else if (state->hand[player][i] == gold)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1375:	{
    #####: 1376:	  state->coins += 3;
        -: 1377:	}	
        -: 1378:    }	
        -: 1379:
        -: 1380:  //add bonus
        8: 1381:  state->coins += bonus;
        -: 1382:
        8: 1383:  return 0;
        -: 1384:}
        -: 1385:
        -: 1386:
        -: 1387://end of dominion.c
        -: 1388:
